# app/core/workflows/nodes/classify.py

from app.core.workflows.nodes.classify import detect_intent  # Importing the detect_intent function
from typing import Dict

class IntentClassifierNode:
    async def __call__(self, state: Dict) -> Dict:
        """
        Full classification pipeline using the conversation state.
        This is where more complex processing happens.
        """
        user_message = state.get("user_message", "")
        detected_intent = detect_intent(user_message)
        state["intent"] = detected_intent
        return state

    async def quick_classify(self, user_message: str) -> str:
        """
        Lightweight keyword-based quick classifier for faster processing.
        """
        message = user_message.lower()

        # Intent classification based on simple keyword matching
        if any(word in message for word in ["appointment", "book", "schedule", "visit"]):
            return "appointment"
        if any(word in message for word in ["location", "address", "where", "map"]):
            return "contact_info"
        if any(word in message for word in ["faq", "questions", "hours", "timing"]):
            return "faqs"
        if any(word in message for word in ["agent", "talk", "human"]):
            return "handoff"
        
        # Default fallback if no keyword matches
        return "unknown"
